# -*- coding: utf-8 -*-
# Generated by Django 1.11.23 on 2020-03-29 02:16
from __future__ import unicode_literals

from django.db import migrations


def migrate_new_data(apps, schema_editor):

    BookingAllotment = apps.get_model('booking', 'BookingAllotment')
    BookingTransfer = apps.get_model('booking', 'BookingTransfer')
    BookingExtra = apps.get_model('booking', 'BookingExtra')
    BookingProvidedAllotment = apps.get_model('booking', 'BookingProvidedAllotment')
    BookingProvidedTransfer = apps.get_model('booking', 'BookingProvidedTransfer')
    BookingProvidedExtra = apps.get_model('booking', 'BookingProvidedExtra')
    BookingServicePax = apps.get_model('booking', 'BookingServicePax')
    BaseBookingServicePax = apps.get_model('booking', 'BaseBookingServicePax')

    for service in BookingAllotment.objects.all():
        new_service = BookingProvidedAllotment()
        build_new_booking_allotment(new_service, service)
        new_service.save()
        for pax in BookingServicePax.objects.filter(booking_service=service.pk):
            new_pax = BaseBookingServicePax()
            build_new_booking_pax(new_pax, pax)
            new_pax.save()

    for service in BookingTransfer.objects.all():
        new_service = BookingProvidedTransfer()
        build_new_booking_transfer(new_service, service)
        new_service.save()
        for pax in BookingServicePax.objects.filter(booking_service=service.pk):
            new_pax = BaseBookingServicePax()
            build_new_booking_pax(new_pax, pax)
            new_pax.save()

    for service in BookingExtra.objects.all():
        new_service = BookingProvidedExtra()
        build_new_booking_extra(new_service, service)
        new_service.save()
        for pax in BookingServicePax.objects.filter(booking_service=service.pk):
            new_pax = BaseBookingServicePax()
            build_new_booking_pax(new_pax, pax)
            new_pax.save()

def copy_booking_service(new_service, service):
    new_service.pk = service.pk
    new_service.booking_id = service.booking_id
    new_service.provider_id = service.provider_id
    new_service.base_service_id = service.base_service_id
    new_service.name = service.name
    new_service.description = service.description
    new_service.time = service.time
    new_service.datetime_from = service.datetime_from
    new_service.datetime_to = service.datetime_to
    new_service.status = service.status
    new_service.base_location_id = service.base_location_id
    new_service.base_category = service.base_category
    new_service.service_addon_id = service.service_addon_id
    new_service.cost_amount = service.cost_amount
    new_service.cost_comments = service.cost_comments
    new_service.manual_cost = service.manual_cost
    new_service.price_amount = service.price_amount
    new_service.price_comments = service.price_comments
    new_service.manual_price = service.manual_price
    new_service.p_notes = service.p_notes
    if hasattr(service, 'v_notes'):
        new_service.v_notes = service.v_notes


def build_new_booking_allotment(new_service, service):
    copy_booking_service(new_service, service)

    new_service.service_id = service.service_id
    new_service.room_type_id = service.room_type_id
    new_service.board_type = service.board_type
    new_service.version = service.version
    return new_service


def build_new_booking_transfer(new_service, service):
    copy_booking_service(new_service, service)

    new_service.service_id = service.service_id
    new_service.pickup_id = service.pickup_id
    new_service.dropoff_id = service.dropoff_id
    new_service.location_from_id = service.location_from_id
    new_service.location_to_id = service.location_to_id
    new_service.place_from_id = service.place_from_id
    new_service.place_to_id = service.place_to_id
    new_service.schedule_from_id = service.schedule_from_id
    new_service.schedule_to_id = service.schedule_to_id
    new_service.schedule_time_from = service.schedule_time_from
    new_service.schedule_time_to = service.schedule_time_to
    new_service.quantity = service.quantity
    new_service.version = service.version
    return new_service


def build_new_booking_extra(new_service, service):
    copy_booking_service(new_service, service)

    new_service.service_id = service.service_id
    new_service.pickup_office_id = service.pickup_office_id
    new_service.dropoff_office_id = service.dropoff_office_id
    new_service.parameter = service.parameter
    new_service.version = service.version
    new_service.quantity = service.quantity
    return new_service


def build_new_booking_pax(new_pax, pax):
    new_pax.pk = pax.pk
    new_pax.booking_pax_id = pax.booking_pax_id
    new_pax.booking_service_id = pax.booking_service_id
    new_pax.group = pax.group
    new_pax.force_adult = pax.force_adult

    new_pax.is_cost_free = pax.is_cost_free
    new_pax.cost_amount = pax.cost_amount
    new_pax.cost_comments = pax.cost_comments

    new_pax.is_price_free = pax.is_price_free
    new_pax.price_amount = pax.price_amount
    new_pax.price_comments = pax.price_comments

    new_pax.version = pax.version


def backwards_function(apps, schema_editor):
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('booking', '0032_custom_20200530_0900'),
    ]

    operations = [

        migrations.RunPython(migrate_new_data, backwards_function),

    ]

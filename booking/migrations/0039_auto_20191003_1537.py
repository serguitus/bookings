# -*- coding: utf-8 -*-
# Generated by Django 1.11.17 on 2019-10-03 19:37
from __future__ import unicode_literals

from django.db import migrations, IntegrityError, models, transaction
import django.db.models.deletion

def create_base_service_list(apps, schema_editor):
    BaseBookingService = apps.get_model('booking', 'BaseBookingService')
    BookingService = apps.get_model('booking', 'BookingService')
    BookingPackageService = apps.get_model('booking', 'BookingPackageService')

    for cl in [BookingService, BookingPackageService]:
        for bs in cl.objects.filter(base_service__isnull=True):
            try:
                with transaction.atomic():
                    if cl is BookingService:
                        cat = 'B'
                    else:
                        cat = 'P'
                    new_base = BaseBookingService(
                        conf_number = bs.conf_number,
                        cost_amount = bs.cost_amount,
                        cost_comments = bs.cost_comments,
                        price_amount = bs.price_amount,
                        price_comments = bs.price_amount,
                        p_notes = bs.p_notes,
                        provider_notes = bs.provider_notes,
                        manual_cost = bs.manual_cost,
                        manual_price = bs.manual_price,
                        name = bs.name,
                        service_location = bs.service_location,
                        service_type = bs.service_type,
                        description = bs.description,
                        service_addon = bs.service_addon,
                        status = bs.status,
                        provider = bs.provider,
                        base_category = cat
                    )
                    new_base.save()
                    bs.base_service = new_base
                    bs.save()
            except IntegrityError:
                continue


def backwards_function(apps, schema_editor):
    pass

class Migration(migrations.Migration):

    dependencies = [
        ('finance', '0022_auto_20190924_1006'),
        ('accounting', '0003_auto_20190402_0637'),
        ('config', '0018_auto_20191002_1116'),
        ('booking', '0038_auto_20191002_1116'),
    ]

    operations = [
        migrations.CreateModel(
            name='BaseBookingService',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='Base Service', max_length=250)),
                ('service_type', models.CharField(blank=True, choices=[('A', 'Allotment'), ('T', 'Transfer'), ('E', 'Extra'), ('P', 'Package')], max_length=5, null=True)),
                ('service_location', models.CharField(blank=True, max_length=50, null=True, verbose_name='Location')),
                ('description', models.CharField(blank=True, max_length=1000, null=True)),
                ('status', models.CharField(choices=[('PD', 'Pending'), ('RQ', 'Requested'), ('PH', 'Phone Confirmed'), ('OK', 'Confirmed'), ('CD', 'Coordinated'), ('CN', 'Cancelled')], default='PD', max_length=5)),
                ('conf_number', models.CharField(blank=True, max_length=20, null=True)),
                ('cost_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('cost_comments', models.CharField(blank=True, max_length=1000, null=True)),
                ('price_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('price_comments', models.CharField(blank=True, max_length=1000, null=True)),
                ('p_notes', models.CharField(blank=True, max_length=1000, null=True, verbose_name='Private Notes')),
                ('provider_notes', models.CharField(blank=True, max_length=1000, null=True, verbose_name='Provider Notes')),
                ('manual_cost', models.BooleanField(default=False)),
                ('manual_price', models.BooleanField(default=False)),
                ('base_category', models.CharField(blank=True, choices=[('B', 'Booking Service'), ('P', 'Booking Package Service')], max_length=5, null=True)),
                ('provider', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='finance.Provider')),
                ('service_addon', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='config.Addon')),
            ],
            options={
                'verbose_name': 'Base Booking Service',
                'verbose_name_plural': 'Base Bookings Services',
                'ordering': ['provider', 'service_type'],
            },
        ),
        migrations.CreateModel(
            name='ProviderBookingPayment',
            fields=[
                ('finantialdocument_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='finance.FinantialDocument')),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounting.Account')),
                ('current_operation', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='accounting.Operation')),
                ('provider', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='finance.Provider')),
            ],
            options={
                'verbose_name': 'Provider Booking Payment',
                'verbose_name_plural': 'Providers Bookings Payments',
            },
            bases=('finance.finantialdocument', models.Model),
        ),
        migrations.CreateModel(
            name='ProviderBookingPaymentService',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('provider_payment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='booking.ProviderBookingPayment')),
                ('provider_service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='booking.BaseBookingService')),
            ],
            options={
                'verbose_name': 'Provider Booking Payment',
                'verbose_name_plural': 'Providers Bookings Payments',
            },
        ),
        migrations.RemoveField(
            model_name='bookingpackageservice',
            name='provider_invoice',
        ),
        migrations.RemoveField(
            model_name='bookingservice',
            name='provider_invoice',
        ),
        migrations.AddField(
            model_name='bookingpackageservice',
            name='base_service',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='booking.BaseBookingService'),
        ),
        migrations.AddField(
            model_name='bookingservice',
            name='base_service',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='booking.BaseBookingService'),
        ),

        migrations.RunPython(create_base_service_list, backwards_function),

    ]

